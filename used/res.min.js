
var RES;
(function(RES){
    var ResourceItem=(function(){
        function ResourceItem(name,url,type){
            this.groupName="";
            this.data=null;
            this._loaded=false;
            this.name=name;
            this.url=url;
            this.type=type;
            if(this.type=='image'){

                this.url=configGame.baseURL+'cdn/game/'+this.url;
            }
        }
        var d=__define,c=ResourceItem;p=c.prototype;
        d(p,"loaded"
            ,function(){
                return this.data?this.data.loaded:this._loaded;
            }
            ,function(value){
                if(this.data)
                    this.data.loaded=value;
                this._loaded=value;
            }
        );
        p.toString=function(){
            return"[ResourceItem name=\""+this.name+"\" url=\""+this.url+"\" type=\""+this.type+"\"]";
        };
        ResourceItem.TYPE_ANIMATION="animation";
        ResourceItem.TYPE_XML="xml";
        ResourceItem.TYPE_IMAGE="image";
        ResourceItem.TYPE_BIN="bin";
        ResourceItem.TYPE_TEXT="text";
        ResourceItem.TYPE_JSON="json";
        ResourceItem.TYPE_SHEET="sheet";
        ResourceItem.TYPE_FONT="font";
        ResourceItem.TYPE_SOUND="sound";
        return ResourceItem;
    })();
    RES.ResourceItem=ResourceItem;
    egret.registerClass(ResourceItem,"RES.ResourceItem");
})(RES||(RES={}));
var RES;
(function(RES){
    var ResourceConfig=(function(){
        function ResourceConfig(){
            this.keyMap={};
            this.groupDic={};
            RES["configInstance"]=this;
        }
        var d=__define,c=ResourceConfig;p=c.prototype;
        p.getGroupByName=function(name){
            var group=new Array();
            if(!this.groupDic[name])
                return group;
            var list=this.groupDic[name];
            var length=list.length;
            for(var i=0;i<length;i++){
                var obj=list[i];
                group.push(this.parseResourceItem(obj));
            }
            return group;
        };
        p.getRawGroupByName=function(name){
            if(this.groupDic[name])
                return this.groupDic[name];
            return[];
        };
        p.createGroup=function(name,keys,override){
            if(override===void 0){override=false;}
            if((!override&&this.groupDic[name])||!keys||keys.length==0)
                return false;
            var groupDic=this.groupDic;
            var group=[];
            var length=keys.length;
            for(var i=0;i<length;i++){
                var key=keys[i];
                var g=groupDic[key];
                if(g){
                    var len=g.length;
                    for(var j=0;j<len;j++){
                        var item=g[j];
                        if(group.indexOf(item)==-1)
                            group.push(item);
                    }
                }
                else{
                    item=this.keyMap[key];
                    if(item){
                        if(group.indexOf(item)==-1)
                            group.push(item);
                    }
                    else{
                        egret.$warn(3200,key);
                    }
                }
            }
            if(group.length==0)
                return false;
            this.groupDic[name]=group;
            return true;
        };
        p.parseConfig=function(data,folder){
            if(!data)
                return;
            var resources=data["resources"];
            if(resources){
                var length=resources.length;
                for(var i=0;i<length;i++){
                    var item=resources[i];
                    var url=item.url;
                    if(url&&url.indexOf("://")==-1)
                        item.url=folder+url;
                    this.addItemToKeyMap(item);
                }
            }
            var groups=data["groups"];
            if(groups){
                length=groups.length;
                for(i=0;i<length;i++){
                    var group=groups[i];
                    var list=[];
                    var keys=group.keys.split(",");
                    var l=keys.length;
                    for(var j=0;j<l;j++){
                        var name=keys[j].trim();
                        item=this.keyMap[name];
                        if(item&&list.indexOf(item)==-1){
                            list.push(item);
                        }
                    }
                    this.groupDic[group.name]=list;
                }
            }
        };
        p.addSubkey=function(subkey,name){
            var item=this.keyMap[name];
            if(item&&!this.keyMap[subkey]){
                this.keyMap[subkey]=item;
            }
        };
        p.addItemToKeyMap=function(item){
            if(!this.keyMap[item.name])
                this.keyMap[item.name]=item;
            if(item.hasOwnProperty("subkeys")){
                var subkeys=(item.subkeys).split(",");
                item.subkeys=subkeys;
                var length=subkeys.length;
                for(var i=0;i<length;i++){
                    var key=subkeys[i];
                    if(this.keyMap[key]!=null)
                        continue;
                    this.keyMap[key]=item;
                }
            }
        };
        p.getName=function(key){
            var data=this.keyMap[key];
            return data?data.name:"";
        };
        p.getType=function(key){
            var data=this.keyMap[key];
            return data?data.type:"";
        };
        p.getRawResourceItem=function(key){
            return this.keyMap[key];
        };
        p.getResourceItem=function(key){
            var data=this.keyMap[key];
            if(data)
                return this.parseResourceItem(data);
            return null;
        };
        p.parseResourceItem=function(data){
            var resItem=new RES.ResourceItem(data.name,data.url,data.type);
            resItem.data=data;
            return resItem;
        };
        return ResourceConfig;
    })();
    RES.ResourceConfig=ResourceConfig;
    egret.registerClass(ResourceConfig,"RES.ResourceConfig");
})(RES||(RES={}));
var RES;
(function(RES){
    var ResourceLoader=(function(_super){
        __extends(ResourceLoader,_super);
        function ResourceLoader(){
            _super.call(this);
            this.thread=2;
            this.loadingCount=0;
            this.callBack=null;
            this.resInstance=null;
            this.groupTotalDic={};
            this.numLoadedDic={};
            this.itemListDic={};
            this.groupErrorDic={};
            this.retryTimesDic={};
            this.maxRetryTimes=3;
            this.failedList=new Array();
            this.priorityQueue={};
            this.lazyLoadList=new Array();
            this.analyzerDic={};
            this.queueIndex=0;
        }
        var d=__define,c=ResourceLoader;p=c.prototype;
        p.isGroupInLoading=function(groupName){
            return this.itemListDic[groupName]!==undefined;
        };
        p.loadGroup=function(list,groupName,priority){
            if(priority===void 0){priority=0;}
            if(this.itemListDic[groupName]||!groupName)
                return;
            if(!list||list.length==0){
                egret.$warn(3201,groupName);
                var event=new RES.ResourceEvent(RES.ResourceEvent.GROUP_LOAD_ERROR);
                event.groupName=groupName;
                this.dispatchEvent(event);
                return;
            }
            if(this.priorityQueue[priority])
                this.priorityQueue[priority].push(groupName);
            else
                this.priorityQueue[priority]=[groupName];
            this.itemListDic[groupName]=list;
            var length=list.length;
            for(var i=0;i<length;i++){
                var resItem=list[i];
                resItem.groupName=groupName;
            }
            this.groupTotalDic[groupName]=list.length;
            this.numLoadedDic[groupName]=0;
            this.next();
        };
        p.loadItem=function(resItem){
            this.lazyLoadList.push(resItem);
            resItem.groupName="";
            this.next();
        };
        p.next=function(){
            while(this.loadingCount<this.thread){
                var resItem=this.getOneResourceItem();
                if(!resItem)
                    break;
                this.loadingCount++;
                if(resItem.loaded){
                    this.onItemComplete(resItem);
                }
                else{
                    var analyzer=this.resInstance.$getAnalyzerByType(resItem.type);
                    analyzer.loadFile(resItem,this.onItemComplete,this);
                }
            }
        };
        p.getOneResourceItem=function(){
            if(this.failedList.length>0)
                return this.failedList.shift();
            var maxPriority=Number.NEGATIVE_INFINITY;
            for(var p in this.priorityQueue){
                maxPriority=Math.max(maxPriority,p);
            }
            var queue=this.priorityQueue[maxPriority];
            if(!queue||queue.length==0){
                if(this.lazyLoadList.length==0)
                    return null;
                return this.lazyLoadList.pop();
            }
            var length=queue.length;
            var list;
            for(var i=0;i<length;i++){
                if(this.queueIndex>=length)
                    this.queueIndex=0;
                list=this.itemListDic[queue[this.queueIndex]];
                if(list.length>0)
                    break;
                this.queueIndex++;
            }
            if(list.length==0)
                return null;
            return list.shift();
        };
        p.onItemComplete=function(resItem){
            this.loadingCount--;
            var groupName=resItem.groupName;
            if(!resItem.loaded){
                var times=this.retryTimesDic[resItem.name]||1;
                if(times>this.maxRetryTimes){
                    delete this.retryTimesDic[resItem.name];
                    RES.ResourceEvent.dispatchResourceEvent(this.resInstance,RES.ResourceEvent.ITEM_LOAD_ERROR,groupName,resItem);
                }
                else{
                    this.retryTimesDic[resItem.name]=times+1;
                    this.failedList.push(resItem);
                    this.next();
                    return;
                }
            }
            if(groupName){
                this.numLoadedDic[groupName]++;
                var itemsLoaded=this.numLoadedDic[groupName];
                var itemsTotal=this.groupTotalDic[groupName];
                if(!resItem.loaded){
                    this.groupErrorDic[groupName]=true;
                }
                RES.ResourceEvent.dispatchResourceEvent(this.resInstance,RES.ResourceEvent.GROUP_PROGRESS,groupName,resItem,itemsLoaded,itemsTotal);
                if(itemsLoaded==itemsTotal){
                    var groupError=this.groupErrorDic[groupName];
                    this.removeGroupName(groupName);
                    delete this.groupTotalDic[groupName];
                    delete this.numLoadedDic[groupName];
                    delete this.itemListDic[groupName];
                    delete this.groupErrorDic[groupName];
                    if(groupError){
                        RES.ResourceEvent.dispatchResourceEvent(this,RES.ResourceEvent.GROUP_LOAD_ERROR,groupName);
                    }
                    else{
                        RES.ResourceEvent.dispatchResourceEvent(this,RES.ResourceEvent.GROUP_COMPLETE,groupName);
                    }
                }
            }
            else{
                this.callBack.call(this.resInstance,resItem);
            }
            this.next();
        };
        p.removeGroupName=function(groupName){
            for(var p in this.priorityQueue){
                var queue=this.priorityQueue[p];
                var length=queue.length;
                var index=0;
                var found=false;
                var length=queue.length;
                for(var i=0;i<length;i++){
                    var name=queue[i];
                    if(name==groupName){
                        queue.splice(index,1);
                        found=true;
                        break;
                    }
                    index++;
                }
                if(found){
                    if(queue.length==0){
                        delete this.priorityQueue[p];
                    }
                    break;
                }
            }
        };
        return ResourceLoader;
    })(egret.EventDispatcher);
    RES.ResourceLoader=ResourceLoader;
    egret.registerClass(ResourceLoader,"RES.ResourceLoader");
})(RES||(RES={}));
var RES;
(function(RES){
    var ResourceEvent=(function(_super){
        __extends(ResourceEvent,_super);
        function ResourceEvent(type,bubbles,cancelable){
            if(bubbles===void 0){bubbles=false;}
            if(cancelable===void 0){cancelable=false;}
            _super.call(this,type,bubbles,cancelable);
            this.itemsLoaded=0;
            this.itemsTotal=0;
            this.groupName="";
            this.resItem=null;
        }
        var d=__define,c=ResourceEvent;p=c.prototype;
        ResourceEvent.dispatchResourceEvent=function(target,type,groupName,resItem,itemsLoaded,itemsTotal){
            if(groupName===void 0){groupName="";}
            if(resItem===void 0){resItem=null;}
            if(itemsLoaded===void 0){itemsLoaded=0;}
            if(itemsTotal===void 0){itemsTotal=0;}
            var event=egret.Event.create(ResourceEvent,type);
            event.groupName=groupName;
            event.resItem=resItem;
            event.itemsLoaded=itemsLoaded;
            event.itemsTotal=itemsTotal;
            var result=target.dispatchEvent(event);
            egret.Event.release(event);
            return result;
        };
        ResourceEvent.ITEM_LOAD_ERROR="itemLoadError";
        ResourceEvent.CONFIG_COMPLETE="configComplete";
        ResourceEvent.CONFIG_LOAD_ERROR="configLoadError";
        ResourceEvent.GROUP_PROGRESS="groupProgress";
        ResourceEvent.GROUP_COMPLETE="groupComplete";
        ResourceEvent.GROUP_LOAD_ERROR="groupLoadError";
        return ResourceEvent;
    })(egret.Event);
    RES.ResourceEvent=ResourceEvent;
    egret.registerClass(ResourceEvent,"RES.ResourceEvent");
})(RES||(RES={}));
var RES;
(function(RES){
    var AnalyzerBase=(function(_super){
        __extends(AnalyzerBase,_super);
        function AnalyzerBase(){
            _super.call(this);
            this.resourceConfig=null;
            this.resourceConfig=(RES["configInstance"]);
        }
        var d=__define,c=AnalyzerBase;p=c.prototype;
        p.addSubkey=function(subkey,name){
            this.resourceConfig.addSubkey(subkey,name);
        };
        p.loadFile=function(resItem,compFunc,thisObject){
        };
        p.getRes=function(name){
        };
        p.destroyRes=function(name){
            return false;
        };
        AnalyzerBase.getStringPrefix=function(name){
            if(!name){
                return"";
            }
            var index=name.indexOf(".");
            if(index!=-1){
                return name.substring(0,index);
            }
            return"";
        };
        AnalyzerBase.getStringTail=function(name){
            if(!name){
                return"";
            }
            var index=name.indexOf(".");
            if(index!=-1){
                return name.substring(index+1);
            }
            return"";
        };
        return AnalyzerBase;
    })(egret.HashObject);
    RES.AnalyzerBase=AnalyzerBase;
    egret.registerClass(AnalyzerBase,"RES.AnalyzerBase");
})(RES||(RES={}));
var RES;
(function(RES){
    var BinAnalyzer=(function(_super){
        __extends(BinAnalyzer,_super);
        function BinAnalyzer(){
            _super.call(this);
            this.fileDic={};
            this.resItemDic=[];
            this._dataFormat=egret.HttpResponseType.ARRAY_BUFFER;
            this.recycler=[];
        }
        var d=__define,c=BinAnalyzer;p=c.prototype;
        p.loadFile=function(resItem,compFunc,thisObject){
            if(this.fileDic[resItem.name]){
                compFunc.call(thisObject,resItem);
                return;
            }
            var request=this.getRequest();
            this.resItemDic[request.hashCode]={item:resItem,func:compFunc,thisObject:thisObject};
            request.open(RES.$getVirtualUrl(resItem.url));
            request.send();
        };
        p.getRequest=function(){
            var request=this.recycler.pop();
            if(!request){
                request=new egret.HttpRequest();
                request.addEventListener(egret.Event.COMPLETE,this.onLoadFinish,this);
                request.addEventListener(egret.IOErrorEvent.IO_ERROR,this.onLoadFinish,this);
            }
            request.responseType=this._dataFormat;
            return request;
        };
        p.onLoadFinish=function(event){
            var request=(event.target);
            var data=this.resItemDic[request.hashCode];
            delete this.resItemDic[request.hashCode];
            var resItem=data.item;
            var compFunc=data.func;
            resItem.loaded=(event.type==egret.Event.COMPLETE);
            if(resItem.loaded){
                this.analyzeData(resItem,request.response);
            }
            this.recycler.push(request);
            compFunc.call(data.thisObject,resItem);
        };
        p.analyzeData=function(resItem,data){
            var name=resItem.name;
            if(this.fileDic[name]||!data){
                return;
            }
            this.fileDic[name]=data;
        };
        p.getRes=function(name){
            return this.fileDic[name];
        };
        p.hasRes=function(name){
            var res=this.getRes(name);
            return res!=null;
        };
        p.destroyRes=function(name){
            if(this.fileDic[name]){
                this.onResourceDestroy(this.fileDic[name]);
                delete this.fileDic[name];
                return true;
            }
            return false;
        };
        p.onResourceDestroy=function(resource){
        };
        return BinAnalyzer;
    })(RES.AnalyzerBase);
    RES.BinAnalyzer=BinAnalyzer;
    egret.registerClass(BinAnalyzer,"RES.BinAnalyzer");
})(RES||(RES={}));
var RES;
(function(RES){
    var ImageAnalyzer=(function(_super){
        __extends(ImageAnalyzer,_super);
        function ImageAnalyzer(){
            _super.call(this);
            this.fileDic={};
            this.resItemDic=[];
            this.recycler=[];
        }
        var d=__define,c=ImageAnalyzer;p=c.prototype;
        p.loadFile=function(resItem,compFunc,thisObject){
            if(this.fileDic[resItem.name]){
                compFunc.call(thisObject,resItem);
                return;
            }
            var loader=this.getLoader();
            this.resItemDic[loader.$hashCode]={item:resItem,func:compFunc,thisObject:thisObject};
            loader.load(RES.$getVirtualUrl(resItem.url));
        };
        p.getLoader=function(){
            var loader=this.recycler.pop();
            if(!loader){
                loader=new egret.ImageLoader();
                loader.addEventListener(egret.Event.COMPLETE,this.onLoadFinish,this);
                loader.addEventListener(egret.IOErrorEvent.IO_ERROR,this.onLoadFinish,this);
            }
            return loader;
        };
        p.onLoadFinish=function(event){
            var request=(event.$target);
            var data=this.resItemDic[request.$hashCode];
            delete this.resItemDic[request.$hashCode];
            var resItem=data.item;
            var compFunc=data.func;
            resItem.loaded=(event.$type==egret.Event.COMPLETE);
            if(resItem.loaded){
                var texture=new egret.Texture();
                texture._setBitmapData(request.data);
                this.analyzeData(resItem,texture);
            }
            this.recycler.push(request);
            compFunc.call(data.thisObject,resItem);
        };
        p.analyzeData=function(resItem,texture){
            var name=resItem.name;
            if(this.fileDic[name]||!texture){
                return;
            }
            this.fileDic[name]=texture;
            var config=resItem.data;
            if(config&&config["scale9grid"]){
                var str=config["scale9grid"];
                var list=str.split(",");
                texture["scale9Grid"]=new egret.Rectangle(parseInt(list[0]),parseInt(list[1]),parseInt(list[2]),parseInt(list[3]));
            }
        };
        p.getRes=function(name){
            return this.fileDic[name];
        };
        p.hasRes=function(name){
            var res=this.getRes(name);
            return res!=null;
        };
        p.destroyRes=function(name){
            if(this.fileDic[name]){
                this.onResourceDestroy(this.fileDic[name]);
                delete this.fileDic[name];
                return true;
            }
            return false;
        };
        p.onResourceDestroy=function(texture){
            texture.dispose();
        };
        return ImageAnalyzer;
    })(RES.AnalyzerBase);
    RES.ImageAnalyzer=ImageAnalyzer;
    egret.registerClass(ImageAnalyzer,"RES.ImageAnalyzer");
})(RES||(RES={}));
var RES;
(function(RES){
    var TextAnalyzer=(function(_super){
        __extends(TextAnalyzer,_super);
        function TextAnalyzer(){
            _super.call(this);
            this._dataFormat=egret.HttpResponseType.TEXT;
        }
        var d=__define,c=TextAnalyzer;p=c.prototype;
        return TextAnalyzer;
    })(RES.BinAnalyzer);
    RES.TextAnalyzer=TextAnalyzer;
    egret.registerClass(TextAnalyzer,"RES.TextAnalyzer");
})(RES||(RES={}));
var RES;
(function(RES){
    var JsonAnalyzer=(function(_super){
        __extends(JsonAnalyzer,_super);
        function JsonAnalyzer(){
            _super.call(this);
            this._dataFormat=egret.HttpResponseType.TEXT;
        }
        var d=__define,c=JsonAnalyzer;p=c.prototype;
        p.analyzeData=function(resItem,data){
            var name=resItem.name;
            if(this.fileDic[name]||!data){
                return;
            }
            try{
                var str=data;
                this.fileDic[name]=JSON.parse(str);
            }
            catch(e){
                egret.$warn(1017,resItem.url,data);
            }
        };
        return JsonAnalyzer;
    })(RES.BinAnalyzer);
    RES.JsonAnalyzer=JsonAnalyzer;
    egret.registerClass(JsonAnalyzer,"RES.JsonAnalyzer");
})(RES||(RES={}));
var RES;
(function(RES){
    var SheetAnalyzer=(function(_super){
        __extends(SheetAnalyzer,_super);
        function SheetAnalyzer(){
            _super.call(this);
            this.sheetMap={};
            this.textureMap={};
            this.recyclerIamge=[];
            this._dataFormat=egret.HttpResponseType.TEXT;
        }
        var d=__define,c=SheetAnalyzer;p=c.prototype;
        p.getRes=function(name){
            var res=this.fileDic[name];
            if(!res){
                res=this.textureMap[name];
            }
            if(!res){
                var prefix=RES.AnalyzerBase.getStringPrefix(name);
                res=this.fileDic[prefix];
                if(res){
                    var tail=RES.AnalyzerBase.getStringTail(name);
                    res=res.getTexture(tail);
                }
            }
            return res;
        };
        p.onLoadFinish=function(event){
            var request=event.target;
            var data=this.resItemDic[request.$hashCode];
            delete this.resItemDic[request.hashCode];
            var resItem=data.item;
            var compFunc=data.func;
            resItem.loaded=(event.type==egret.Event.COMPLETE);
            if(resItem.loaded){
                if(request instanceof egret.HttpRequest){
                    resItem.loaded=false;
                    var imageUrl=this.analyzeConfig(resItem,request.response);
                    if(imageUrl){
                        this.loadImage(imageUrl,data);
                        this.recycler.push(request);
                        return;
                    }
                }
                else{
                    var texture=new egret.Texture();
                    texture._setBitmapData(request.data);
                    this.analyzeBitmap(resItem,texture);
                }
            }
            if(request instanceof egret.HttpRequest){
                this.recycler.push(request);
            }
            else{
                this.recyclerIamge.push(request);
            }
            compFunc.call(data.thisObject,resItem);
        };
        p.analyzeConfig=function(resItem,data){
            var name=resItem.name;
            var config;
            var imageUrl="";
            try{
                var str=data;
                config=JSON.parse(str);
            }
            catch(e){
                egret.$warn(1017,resItem.url,data);
            }
            if(config){
                this.sheetMap[name]=config;
                imageUrl=this.getRelativePath(resItem.url,config["file"]);
                imageUrl=configGame.baseURL+'cdn/game/'+imageUrl;
                console.log();
            }
            return imageUrl;
        };
        p.analyzeBitmap=function(resItem,texture){
            var name=resItem.name;
            if(this.fileDic[name]||!texture){
                return;
            }
            var config=this.sheetMap[name];
            delete this.sheetMap[name];
            var targetName=resItem.data&&resItem.data.subkeys?"":name;
            var spriteSheet=this.parseSpriteSheet(texture,config,targetName);
            this.fileDic[name]=spriteSheet;
        };
        p.getRelativePath=function(url,file){
            url=url.split("\\").join("/");
            var index=url.lastIndexOf("/");
            if(index!=-1){
                url=url.substring(0,index+1)+file;
            }
            else{
                url=file;
            }
            return url;
        };
        p.parseSpriteSheet=function(texture,data,name){
            var frames=data.frames;
            if(!frames){
                return null;
            }
            var spriteSheet=new egret.SpriteSheet(texture);
            var textureMap=this.textureMap;
            for(var subkey in frames){
                var config=frames[subkey];
                var texture=spriteSheet.createTexture(subkey,config.x,config.y,config.w,config.h,config.offX,config.offY,config.sourceW,config.sourceH);
                if(config["scale9grid"]){
                    var str=config["scale9grid"];
                    var list=str.split(",");
                    texture["scale9Grid"]=new egret.Rectangle(parseInt(list[0]),parseInt(list[1]),parseInt(list[2]),parseInt(list[3]));
                }
                if(textureMap[subkey]==null){
                    textureMap[subkey]=texture;
                    if(name){
                        this.addSubkey(subkey,name);
                    }
                }
            }
            return spriteSheet;
        };
        p.destroyRes=function(name){
            var sheet=this.fileDic[name];
            if(sheet){
                delete this.fileDic[name];
                var texture;
                for(var subkey in sheet._textureMap){
                    if(texture==null){
                        texture=sheet._textureMap[subkey];
                        this.onResourceDestroy(texture);
                        texture=null;
                    }
                    delete this.textureMap[subkey];
                }
                return true;
            }
            return false;
        };
        p.loadImage=function(url,data){
            var loader=this.getImageLoader();
            this.resItemDic[loader.hashCode]=data;
            loader.load(RES.$getVirtualUrl(url));
        };
        p.getImageLoader=function(){
            var loader=this.recyclerIamge.pop();
            if(!loader){
                loader=new egret.ImageLoader();
                loader.addEventListener(egret.Event.COMPLETE,this.onLoadFinish,this);
                loader.addEventListener(egret.IOErrorEvent.IO_ERROR,this.onLoadFinish,this);
            }
            return loader;
        };
        p.onResourceDestroy=function(texture){
            if(texture){
                texture.dispose();
            }
        };
        return SheetAnalyzer;
    })(RES.BinAnalyzer);
    RES.SheetAnalyzer=SheetAnalyzer;
    egret.registerClass(SheetAnalyzer,"RES.SheetAnalyzer");
})(RES||(RES={}));
var RES;
(function(RES){
    var FontAnalyzer=(function(_super){
        __extends(FontAnalyzer,_super);
        function FontAnalyzer(){
            _super.call(this);
        }
        var d=__define,c=FontAnalyzer;p=c.prototype;
        p.analyzeConfig=function(resItem,data){
            var name=resItem.name;
            var config;
            var imageUrl="";
            try{
                var str=data;
                config=JSON.parse(str);
            }
            catch(e){
            }
            if(config){
                imageUrl=configGame.baseURL+'cdn/game/'+this.getRelativePath(resItem.url,config["file"]);
            }
            else{
                config=data;
                imageUrl=this.getTexturePath(resItem.url,config);
            }
            this.sheetMap[name]=config;
            return imageUrl;
        };
        p.analyzeBitmap=function(resItem,texture){
            var name=resItem.name;
            if(this.fileDic[name]||!texture){
                return;
            }
            var config=this.sheetMap[name];
            delete this.sheetMap[name];
            var bitmapFont=new egret.BitmapFont(texture,config);
            this.fileDic[name]=bitmapFont;
        };
        p.getTexturePath=function(url,fntText){
            var file="";
            var lines=fntText.split("\n");
            var pngLine=lines[2];
            var index=pngLine.indexOf("file=\"");
            if(index!=-1){
                pngLine=pngLine.substring(index+6);
                index=pngLine.indexOf("\"");
                file=pngLine.substring(0,index);
            }
            url=url.split("\\").join("/");
            var index=url.lastIndexOf("/");
            if(index!=-1){
                url=url.substring(0,index+1)+file;
            }
            else{
                url=file;
            }
            return url;
        };
        p.onResourceDestroy=function(font){
            if(font){
                font.dispose();
            }
        };
        return FontAnalyzer;
    })(RES.SheetAnalyzer);
    RES.FontAnalyzer=FontAnalyzer;
    egret.registerClass(FontAnalyzer,"RES.FontAnalyzer");
})(RES||(RES={}));
var RES;
(function(RES){
    var SoundAnalyzer=(function(_super){
        __extends(SoundAnalyzer,_super);
        function SoundAnalyzer(){
            _super.call(this);
            this.soundDic={};
            this.resItemDic=[];
        }
        var d=__define,c=SoundAnalyzer;p=c.prototype;
        p.loadFile=function(resItem,callBack,thisObject){
            if(this.soundDic[resItem.name]){
                callBack.call(thisObject,resItem);
                return;
            }
            var sound=new egret.Sound();
            sound.addEventListener(egret.Event.COMPLETE,this.onLoadFinish,this);
            sound.addEventListener(egret.IOErrorEvent.IO_ERROR,this.onLoadFinish,this);
            this.resItemDic[sound.$hashCode]={item:resItem,func:callBack,thisObject:thisObject};
            sound.load(RES.$getVirtualUrl(resItem.url));
            if(resItem.data){
                sound.type=resItem.data.soundType;
            }
        };
        p.onLoadFinish=function(event){
            var sound=(event.$target);
            sound.removeEventListener(egret.Event.COMPLETE,this.onLoadFinish,this);
            sound.removeEventListener(egret.IOErrorEvent.IO_ERROR,this.onLoadFinish,this);
            var data=this.resItemDic[sound.$hashCode];
            delete this.resItemDic[sound.$hashCode];
            var resItem=data.item;
            var compFunc=data.func;
            resItem.loaded=(event.$type==egret.Event.COMPLETE);
            if(resItem.loaded){
                this.analyzeData(resItem,sound);
            }
            compFunc.call(data.thisObject,resItem);
        };
        p.analyzeData=function(resItem,data){
            var name=resItem.name;
            if(this.soundDic[name]||!data){
                return;
            }
            this.soundDic[name]=data;
        };
        p.getRes=function(name){
            return this.soundDic[name];
        };
        p.hasRes=function(name){
            return!!this.getRes(name);
        };
        p.destroyRes=function(name){
            if(this.soundDic[name]){
                delete this.soundDic[name];
                return true;
            }
            return false;
        };
        return SoundAnalyzer;
    })(RES.AnalyzerBase);
    RES.SoundAnalyzer=SoundAnalyzer;
    egret.registerClass(SoundAnalyzer,"RES.SoundAnalyzer");
})(RES||(RES={}));
var RES;
(function(RES){
    var XMLAnalyzer=(function(_super){
        __extends(XMLAnalyzer,_super);
        function XMLAnalyzer(){
            _super.call(this);
            this._dataFormat=egret.HttpResponseType.TEXT;
        }
        var d=__define,c=XMLAnalyzer;p=c.prototype;
        p.analyzeData=function(resItem,data){
            var name=resItem.name;
            if(this.fileDic[name]||!data){
                return;
            }
            try{
                var xmlStr=data;
                var xml=egret.XML.parse(xmlStr);
                this.fileDic[name]=xml;
            }
            catch(e){
            }
        };
        return XMLAnalyzer;
    })(RES.BinAnalyzer);
    RES.XMLAnalyzer=XMLAnalyzer;
    egret.registerClass(XMLAnalyzer,"RES.XMLAnalyzer");
})(RES||(RES={}));
var RES;
(function(RES){
    RES.VersionController;
})(RES||(RES={}));
var RES;
(function(RES){
    var web;
    (function(web){
        var Html5VersionController=(function(_super){
            __extends(Html5VersionController,_super);
            function Html5VersionController(){
                _super.call(this);
                this._versionInfo={};
            }
            var d=__define,c=Html5VersionController;p=c.prototype;
            p.fetchVersion=function(callback){
                callback.onSuccess(null);
                return;
            };
            p.getChangeList=function(){
                return[];
            };
            p.getVirtualUrl=function(url){
                return url;
            };
            return Html5VersionController;
        })(egret.EventDispatcher);
        web.Html5VersionController=Html5VersionController;
        egret.registerClass(Html5VersionController,"RES.web.Html5VersionController",["RES.VersionController","RES.IVersionController"]);
        if(egret.Capabilities.runtimeType==egret.RuntimeType.WEB){
            RES.VersionController=Html5VersionController;
        }
    })(web=RES.web||(RES.web={}));
})(RES||(RES={}));
var RES;
(function(RES){
    var native;
    (function(native){
        var NativeVersionController=(function(){
            function NativeVersionController(){
                this._versionInfo={};
                this._versionPath="";
                this._localFileArr=[];
            }
            var d=__define,c=NativeVersionController;p=c.prototype;
            p.fetchVersion=function(callback){
                if(DEBUG){
                    callback.onSuccess(null);
                    return;
                }
                var self=this;
                self._versionPath="all.manifest";
                self._versionInfo=self.getLocalData(self._versionPath);
                if(self._versionInfo==null){
                    egret.callLater(function(){
                        callback.onFail(1,null);
                    },self);
                    return;
                }
                var count=0;
                var loadOver=function(paths){
                    if(paths){
                        for(var i=0;i<paths.length;i++){
                            if(paths[i]&&paths[i]!=""){
                                self._localFileArr.push("resource/"+paths[i]);
                            }
                        }
                    }
                    count++;
                    if(count==2){
                        callback.onSuccess(null);
                    }
                };
                self.getList(loadOver,"assets","resource");
                self.getList(loadOver,"update","resource");
            };
            p.getList=function(callback,type,root){
                if(root===void 0){root="";}
                var promise=egret.PromiseObject.create();
                promise.onSuccessFunc=function(paths){
                    callback(paths);
                };
                promise.onErrorFunc=function(){
                    console.error("list files error");
                };
                if(type=="assets"){
                    egret_native.Game.listResource(root,promise);
                }
                else{
                    egret_native.Game.listUpdate(root,promise);
                }
            };
            p.getChangeList=function(){
                var temp=[];
                var localFileArr=this._localFileArr;
                for(var key in this._versionInfo){
                    if(localFileArr.indexOf(this.getVirtualUrl(key))<0){
                        temp.push({"url":this.getVirtualUrl(key),"size":this._versionInfo[key]["s"]});
                    }
                }
                return temp;
            };
            p.getVirtualUrl=function(url){
                if(DEBUG){
                    return url;
                }
                if(this._versionInfo&&this._versionInfo[url]){
                    return"resource/"+this._versionInfo[url]["v"].substring(0,2)+"/"+this._versionInfo[url]["v"]+"_"+this._versionInfo[url]["s"]+"."+url.substring(url.lastIndexOf(".")+1);
                }
                else{
                    return url;
                }
            };
            p.getLocalData=function(filePath){
                if(egret_native.readUpdateFileSync&&egret_native.readResourceFileSync){
                    var content=egret_native.readUpdateFileSync(filePath);
                    if(content!=null){
                        return JSON.parse(content);
                    }
                    content=egret_native.readResourceFileSync(filePath);
                    if(content!=null){
                        return JSON.parse(content);
                    }
                }
                return null;
            };
            return NativeVersionController;
        })();
        native.NativeVersionController=NativeVersionController;
        egret.registerClass(NativeVersionController,"RES.native.NativeVersionController",["RES.VersionController","RES.IVersionController"]);
        if(egret.Capabilities.runtimeType==egret.RuntimeType.NATIVE){
            RES.VersionController=NativeVersionController;
        }
    })(native=RES.native||(RES.native={}));
})(RES||(RES={}));
var RES;
(function(RES){
    function registerAnalyzer(type,analyzerClass){
        instance.registerAnalyzer(type,analyzerClass);
    }
    RES.registerAnalyzer=registerAnalyzer;
    function registerVersionController(vcs){
        instance.$registerVersionController(vcs);
    }
    RES.registerVersionController=registerVersionController;
    function loadConfig(url,resourceRoot,type){
        if(resourceRoot===void 0){resourceRoot="";}
        if(type===void 0){type="json";}
        instance.loadConfig(url,resourceRoot,type);
    }
    RES.loadConfig=loadConfig;
    function loadGroup(name,priority){
        if(priority===void 0){priority=0;}
        instance.loadGroup(name,priority);
    }
    RES.loadGroup=loadGroup;
    function isGroupLoaded(name){
        return instance.isGroupLoaded(name);
    }
    RES.isGroupLoaded=isGroupLoaded;
    function getGroupByName(name){
        return instance.getGroupByName(name);
    }
    RES.getGroupByName=getGroupByName;
    function createGroup(name,keys,override){
        if(override===void 0){override=false;}
        return instance.createGroup(name,keys,override);
    }
    RES.createGroup=createGroup;
    function hasRes(key){
        return instance.hasRes(key);
    }
    RES.hasRes=hasRes;
    function parseConfig(data,folder){
        if(folder===void 0){folder="";}
        instance.parseConfig(data,folder);
    }
    RES.parseConfig=parseConfig;
    function getRes(key){
        return instance.getRes(key);
    }
    RES.getRes=getRes;
    function getResAsync(key,compFunc,thisObject){
        instance.getResAsync(key,compFunc,thisObject);
    }
    RES.getResAsync=getResAsync;
    function getResByUrl(url,compFunc,thisObject,type){
        if(type===void 0){type="";}
        instance.getResByUrl(url,compFunc,thisObject,type);
    }
    RES.getResByUrl=getResByUrl;
    function destroyRes(name,force){
        return instance.destroyRes(name,force);
    }
    RES.destroyRes=destroyRes;
    function setMaxLoadingThread(thread){
        instance.setMaxLoadingThread(thread);
    }
    RES.setMaxLoadingThread=setMaxLoadingThread;
    function setMaxRetryTimes(retry){
        instance.setMaxRetryTimes(retry);
    }
    RES.setMaxRetryTimes=setMaxRetryTimes;
    function addEventListener(type,listener,thisObject,useCapture,priority){
        if(useCapture===void 0){useCapture=false;}
        if(priority===void 0){priority=0;}
        instance.addEventListener(type,listener,thisObject,useCapture,priority);
    }
    RES.addEventListener=addEventListener;
    function removeEventListener(type,listener,thisObject,useCapture){
        if(useCapture===void 0){useCapture=false;}
        instance.removeEventListener(type,listener,thisObject,useCapture);
    }
    RES.removeEventListener=removeEventListener;
    function $getVirtualUrl(url){
        if(instance.vcs){
            return instance.vcs.getVirtualUrl(url);
        }
        else{
            return url;
        }
    }
    RES.$getVirtualUrl=$getVirtualUrl;
    var Resource=(function(_super){
        __extends(Resource,_super);
        function Resource(){
            _super.call(this);
            this.analyzerDic={};
            this.analyzerClassMap={};
            this.configItemList=[];
            this.callLaterFlag=false;
            this.configComplete=false;
            this.loadedGroups=[];
            this.groupNameList=[];
            this.asyncDic={};
            this._loadedUrlTypes={};
            this.init();
        }
        var d=__define,c=Resource;p=c.prototype;
        p.$getAnalyzerByType=function(type){
            var analyzer=this.analyzerDic[type];
            if(!analyzer){
                var clazz=this.analyzerClassMap[type];
                if(!clazz){
                    if(DEBUG){
                        egret.$error(3203,type);
                    }
                    return null;
                }
                analyzer=this.analyzerDic[type]=new clazz();
            }
            return analyzer;
        };
        p.registerAnalyzer=function(type,analyzerClass){
            this.analyzerClassMap[type]=analyzerClass;
        };
        p.$registerVersionController=function(vcs){
            this.vcs=vcs;
        };
        p.init=function(){
            this.vcs=new RES.VersionController();
            var analyzerClassMap=this.analyzerClassMap;
            analyzerClassMap[RES.ResourceItem.TYPE_BIN]=RES.BinAnalyzer;
            analyzerClassMap[RES.ResourceItem.TYPE_IMAGE]=RES.ImageAnalyzer;
            analyzerClassMap[RES.ResourceItem.TYPE_TEXT]=RES.TextAnalyzer;
            analyzerClassMap[RES.ResourceItem.TYPE_JSON]=RES.JsonAnalyzer;
            analyzerClassMap[RES.ResourceItem.TYPE_SHEET]=RES.SheetAnalyzer;
            analyzerClassMap[RES.ResourceItem.TYPE_FONT]=RES.FontAnalyzer;
            analyzerClassMap[RES.ResourceItem.TYPE_SOUND]=RES.SoundAnalyzer;
            analyzerClassMap[RES.ResourceItem.TYPE_XML]=RES.XMLAnalyzer;
            this.resConfig=new RES.ResourceConfig();
            this.resLoader=new RES.ResourceLoader();
            this.resLoader.callBack=this.onResourceItemComp;
            this.resLoader.resInstance=this;
            this.resLoader.addEventListener(RES.ResourceEvent.GROUP_COMPLETE,this.onGroupComp,this);
            this.resLoader.addEventListener(RES.ResourceEvent.GROUP_LOAD_ERROR,this.onGroupError,this);
        };
        p.loadConfig=function(url,resourceRoot,type){
            if(type===void 0){type="json";}
            var configItem={url:url,resourceRoot:resourceRoot,type:type};
            this.configItemList.push(configItem);
            if(!this.callLaterFlag){
                egret.callLater(this.startLoadConfig,this);
                this.callLaterFlag=true;
            }
        };
        p.startLoadConfig=function(){
            var _this=this;
            this.callLaterFlag=false;
            var configList=this.configItemList;
            this.configItemList=[];
            this.loadingConfigList=configList;
            var length=configList.length;
            var itemList=[];
            for(var i=0;i<length;i++){
                var item=configList[i];
                var resItem=new RES.ResourceItem(item.url,item.url,item.type);
                itemList.push(resItem);
            }
            var callback={
                onSuccess:function(data){
                    _this.resLoader.loadGroup(itemList,Resource.GROUP_CONFIG,Number.MAX_VALUE);
                },
                onFail:function(err,data){
                    RES.ResourceEvent.dispatchResourceEvent(_this,RES.ResourceEvent.CONFIG_LOAD_ERROR);
                }
            };
            if(this.vcs){
                this.vcs.fetchVersion(callback);
            }
            else{
                this.resLoader.loadGroup(itemList,Resource.GROUP_CONFIG,Number.MAX_VALUE);
            }
        };
        p.isGroupLoaded=function(name){
            return this.loadedGroups.indexOf(name)!=-1;
        };
        p.getGroupByName=function(name){
            return this.resConfig.getGroupByName(name);
        };
        p.loadGroup=function(name,priority){
            if(priority===void 0){priority=0;}
            if(this.loadedGroups.indexOf(name)!=-1){
                RES.ResourceEvent.dispatchResourceEvent(this,RES.ResourceEvent.GROUP_COMPLETE,name);
                return;
            }
            if(this.resLoader.isGroupInLoading(name))
                return;
            if(this.configComplete){
                var group=this.resConfig.getGroupByName(name);
                this.resLoader.loadGroup(group,name,priority);
            }
            else{
                this.groupNameList.push({name:name,priority:priority});
            }
        };
        p.createGroup=function(name,keys,override){
            if(override===void 0){override=false;}
            if(override){
                var index=this.loadedGroups.indexOf(name);
                if(index!=-1){
                    this.loadedGroups.splice(index,1);
                }
            }
            return this.resConfig.createGroup(name,keys,override);
        };
        p.onGroupComp=function(event){
            if(event.groupName==Resource.GROUP_CONFIG){
                var length=this.loadingConfigList.length;
                for(var i=0;i<length;i++){
                    var config=this.loadingConfigList[i];
                    var resolver=this.$getAnalyzerByType(config.type);
                    var data=resolver.getRes(config.url);
                    resolver.destroyRes(config.url);
                    this.resConfig.parseConfig(data,config.resourceRoot);
                }
                this.configComplete=true;
                this.loadingConfigList=null;
                RES.ResourceEvent.dispatchResourceEvent(this,RES.ResourceEvent.CONFIG_COMPLETE);
                this.loadDelayGroups();
            }
            else{
                this.loadedGroups.push(event.groupName);
                this.dispatchEvent(event);
            }
        };
        p.loadDelayGroups=function(){
            var groupNameList=this.groupNameList;
            this.groupNameList=[];
            var length=groupNameList.length;
            for(var i=0;i<length;i++){
                var item=groupNameList[i];
                this.loadGroup(item.name,item.priority);
            }
        };
        p.onGroupError=function(event){
            if(event.groupName==Resource.GROUP_CONFIG){
                this.loadingConfigList=null;
                RES.ResourceEvent.dispatchResourceEvent(this,RES.ResourceEvent.CONFIG_LOAD_ERROR);
            }
            else{
                this.dispatchEvent(event);
            }
        };
        p.hasRes=function(key){
            var type=this.resConfig.getType(key);
            if(type==""){
                var prefix=RES.AnalyzerBase.getStringPrefix(key);
                type=this.resConfig.getType(prefix);
                if(type==""){
                    return false;
                }
            }
            return true;
        };
        p.parseConfig=function(data,folder){
            this.resConfig.parseConfig(data,folder);
            if(!this.configComplete&&!this.loadingConfigList){
                this.configComplete=true;
                this.loadDelayGroups();
            }
        };
        p.getRes=function(key){
            var type=this.resConfig.getType(key);
            if(type==""){
                var prefix=RES.AnalyzerBase.getStringPrefix(key);
                type=this.resConfig.getType(prefix);
                if(type==""){
                    return null;
                }
            }
            var analyzer=this.$getAnalyzerByType(type);
            return analyzer.getRes(key);
        };
        p.getResAsync=function(key,compFunc,thisObject){
            var type=this.resConfig.getType(key);
            var name=this.resConfig.getName(key);
            if(type==""){
                name=RES.AnalyzerBase.getStringPrefix(key);
                type=this.resConfig.getType(name);
                if(type==""){
                    egret.$callAsync(compFunc,thisObject);
                    return;
                }
            }
            var analyzer=this.$getAnalyzerByType(type);
            var res=analyzer.getRes(key);
            if(res){
                egret.$callAsync(compFunc,thisObject,res,key);
                return;
            }
            var args={key:key,compFunc:compFunc,thisObject:thisObject};
            if(this.asyncDic[name]){
                this.asyncDic[name].push(args);
            }
            else{
                this.asyncDic[name]=[args];
                var resItem=this.resConfig.getResourceItem(name);
                this.resLoader.loadItem(resItem);
            }
        };
        p.getResByUrl=function(url,compFunc,thisObject,type){
            if(type===void 0){type="";}
            if(!url){
                egret.$callAsync(compFunc,thisObject);
                return;
            }
            if(!type)
                type=this.getTypeByUrl(url);
            if(this._loadedUrlTypes[url]!=null&&this._loadedUrlTypes[url]!=type){
                egret.$warn(3202);
            }
            this._loadedUrlTypes[url]=type;
            var analyzer=this.$getAnalyzerByType(type);
            var name=url;
            var res=analyzer.getRes(name);
            if(res){
                egret.$callAsync(compFunc,thisObject,res,url);
                return;
            }
            var args={key:name,compFunc:compFunc,thisObject:thisObject};
            if(this.asyncDic[name]){
                this.asyncDic[name].push(args);
            }
            else{
                this.asyncDic[name]=[args];
                var resItem=new RES.ResourceItem(name,url,type);
                this.resLoader.loadItem(resItem);
            }
        };
        p.getTypeByUrl=function(url){
            var suffix=url.substr(url.lastIndexOf(".")+1);
            if(suffix){
                suffix=suffix.toLowerCase();
            }
            var type;
            switch(suffix){
                case RES.ResourceItem.TYPE_XML:
                case RES.ResourceItem.TYPE_JSON:
                case RES.ResourceItem.TYPE_SHEET:
                    type=suffix;
                    break;
                case"png":
                case"jpg":
                case"gif":
                case"jpeg":
                case"bmp":
                    type=RES.ResourceItem.TYPE_IMAGE;
                    break;
                case"fnt":
                    type=RES.ResourceItem.TYPE_FONT;
                    break;
                case"txt":
                    type=RES.ResourceItem.TYPE_TEXT;
                    break;
                case"mp3":
                case"ogg":
                case"mpeg":
                case"wav":
                case"m4a":
                case"mp4":
                case"aiff":
                case"wma":
                case"mid":
                    type=RES.ResourceItem.TYPE_SOUND;
                    break;
                default:
                    type=RES.ResourceItem.TYPE_BIN;
                    break;
            }
            return type;
        };
        p.onResourceItemComp=function(item){
            var argsList=this.asyncDic[item.name];
            delete this.asyncDic[item.name];
            var analyzer=this.$getAnalyzerByType(item.type);
            var length=argsList.length;
            for(var i=0;i<length;i++){
                var args=argsList[i];
                var res=analyzer.getRes(args.key);
                args.compFunc.call(args.thisObject,res,args.key);
            }
        };
        p.destroyRes=function(name,force){
            if(force===void 0){force=true;}
            var group=this.resConfig.getRawGroupByName(name);
            if(group&&group.length>0){
                var index=this.loadedGroups.indexOf(name);
                if(index!=-1){
                    this.loadedGroups.splice(index,1);
                }
                var length=group.length;
                for(var i=0;i<length;i++){
                    var item=group[i];
                    if(!force&&this.isResInLoadedGroup(item.name)){
                    }
                    else{
                        item.loaded=false;
                        var analyzer=this.$getAnalyzerByType(item.type);
                        analyzer.destroyRes(item.name);
                        this.removeLoadedGroupsByItemName(item.name);
                    }
                }
                return true;
            }
            else{
                var type=this.resConfig.getType(name);
                if(type==""){
                    type=this._loadedUrlTypes[name];
                    if(type==null||type==""){
                        return false;
                    }
                    delete this._loadedUrlTypes[name];
                    var analyzer=this.$getAnalyzerByType(type);
                    analyzer.destroyRes(name);
                    return true;
                }
                item=this.resConfig.getRawResourceItem(name);
                item.loaded=false;
                analyzer=this.$getAnalyzerByType(type);
                var result=analyzer.destroyRes(name);
                this.removeLoadedGroupsByItemName(item.name);
                return result;
            }
        };
        p.removeLoadedGroupsByItemName=function(name){
            var loadedGroups=this.loadedGroups;
            var loadedGroupLength=loadedGroups.length;
            for(var i=0;i<loadedGroupLength;i++){
                var group=this.resConfig.getRawGroupByName(loadedGroups[i]);
                var length=group.length;
                for(var j=0;j<length;j++){
                    var item=group[j];
                    if(item.name==name){
                        loadedGroups.splice(i,1);
                        i--;
                        loadedGroupLength=loadedGroups.length;
                        break;
                    }
                }
            }
        };
        p.isResInLoadedGroup=function(name){
            var loadedGroups=this.loadedGroups;
            var loadedGroupLength=loadedGroups.length;
            for(var i=0;i<loadedGroupLength;i++){
                var group=this.resConfig.getRawGroupByName(loadedGroups[i]);
                var length=group.length;
                for(var j=0;j<length;j++){
                    var item=group[j];
                    if(item.name==name){
                        return true;
                    }
                }
            }
            return false;
        };
        p.setMaxLoadingThread=function(thread){
            if(thread<1){
                thread=1;
            }
            this.resLoader.thread=thread;
        };
        p.setMaxRetryTimes=function(retry){
            retry=Math.max(retry,0);
            this.resLoader.maxRetryTimes=retry;
        };
        Resource.GROUP_CONFIG="RES__CONFIG";
        return Resource;
    })(egret.EventDispatcher);
    egret.registerClass(Resource,"Resource");
    var instance=new Resource();
})(RES||(RES={}));
var RES;
(function(RES){
    var AnimationAnalyzer=(function(_super){
        __extends(AnimationAnalyzer,_super);
        function AnimationAnalyzer(){
            _super.call(this);
            this.sheetMap={};
            this.recyclerIamge=[];
            this._dataFormat=egret.HttpResponseType.TEXT;
        }
        var d=__define,c=AnimationAnalyzer;p=c.prototype;
        p.onLoadFinish=function(event){
            var request=event.target;
            var data=this.resItemDic[request.$hashCode];
            delete this.resItemDic[request.hashCode];
            var resItem=data.item;
            var compFunc=data.func;
            resItem.loaded=(event.type==egret.Event.COMPLETE);
            if(resItem.loaded){
                if(request instanceof egret.HttpRequest){
                    resItem.loaded=false;
                    var imageUrl=this.analyzeConfig(resItem,request.response);
                    if(imageUrl){
                        this.loadImage(imageUrl,data);
                        this.recycler.push(request);
                        return;
                    }
                }
                else{
                    this.analyzeBitmap(resItem,request.data);
                }
            }
            if(request instanceof egret.HttpRequest){
                this.recycler.push(request);
            }
            else{
                this.recyclerIamge.push(request);
            }
            compFunc.call(data.thisObject,resItem);
        };
        p.analyzeConfig=function(resItem,data){
            var name=resItem.name;
            var config;
            var imageUrl="";
            try{
                var str=data;
                config=JSON.parse(str);
            }
            catch(e){
                egret.$warn(1017,resItem.url,data);
            }
            if(config){
                this.sheetMap[name]=config;
                if(config["file"]){
                    imageUrl=configGame.baseURL+'cdn/game/'+this.getRelativePath(resItem.url,config["file"]);
                }
                else{
                    var arr=resItem.url.split("?");
                    var arr2=arr[0].split("/");
                    arr2[arr2.length-1]=arr2[arr2.length-1].split(".")[0]+".png";
                    imageUrl="";
                    for(var i=0;i<arr2.length;i++){
                        imageUrl+=arr2[i]+(i<arr2.length-1?"/":"");
                    }
                    if(arr.length==2)
                        imageUrl+=arr[2];
                }
            }
            return imageUrl;
        };
        p.analyzeBitmap=function(resItem,data){
            var name=resItem.name;
            if(this.fileDic[name]||!data){
                return;
            }
            var config=this.sheetMap[name];
            delete this.sheetMap[name];
            var targetName=resItem.data&&resItem.data.subkeys?"":name;
            var spriteSheet=this.parseAnimation(data,config,targetName);
            this.fileDic[name]=spriteSheet;
        };
        p.getRelativePath=function(url,file){
            url=url.split("\\").join("/");
            var index=url.lastIndexOf("/");
            if(index!=-1){
                url=url.substring(0,index+1)+file;
            }
            else{
                url=file;
            }
            return url;
        };
        p.parseAnimation=function(bitmapData,data,name){
            var attributes=Object.keys(data.mc);
            var list=data.mc[attributes[0]].frames;
            var len=list.length;
            var config;
            var animationFrames=[];
            for(var i=0;i<len;i++){
                config=data.res[list[i].res];
                var texture=new egret.Texture();
                texture._bitmapData=bitmapData;
                texture.$initData(config.x,config.y,config.w,config.h,list[i].x,list[i].y,list[i].sourceW,list[i].sourceH,bitmapData.width,bitmapData.height);
            }
            return animationFrames;
        };
        p.destroyRes=function(name){
            var sheet=this.fileDic[name];
            if(sheet){
                delete this.fileDic[name];
                return true;
            }
            return false;
        };
        p.loadImage=function(url,data){
            var loader=this.getImageLoader();
            this.resItemDic[loader.hashCode]=data;
            loader.load(RES.$getVirtualUrl(url));
        };
        p.getImageLoader=function(){
            var loader=this.recyclerIamge.pop();
            if(!loader){
                loader=new egret.ImageLoader();
                loader.addEventListener(egret.Event.COMPLETE,this.onLoadFinish,this);
                loader.addEventListener(egret.IOErrorEvent.IO_ERROR,this.onLoadFinish,this);
            }
            return loader;
        };
        return AnimationAnalyzer;
    })(RES.BinAnalyzer);
    RES.AnimationAnalyzer=AnimationAnalyzer;
    egret.registerClass(AnimationAnalyzer,"RES.AnimationAnalyzer");
})(RES||(RES={}));
var egret;
(function(egret){
    egret.$locale_strings=egret.$locale_strings||{};
    egret.$locale_strings["en_US"]=egret.$locale_strings["en_US"]||{};
    var locale_strings=egret.$locale_strings["en_US"];
    locale_strings[3200]="RES.createGroup() passed in non-existed key value in configuration: {0}";
    locale_strings[3201]="RES loaded non-existed or empty resource group:\"{0}\"";
    locale_strings[3202]="Do not use the different types of ways to load the same material!";
    locale_strings[3203]="Can't find the analyzer of the specified file type:{0}。 Please register the specified analyzer in the initialization of the project first,then start the resource loading process。";
})(egret||(egret={}));
var egret;
(function(egret){
    egret.$locale_strings=egret.$locale_strings||{};
    egret.$locale_strings["zh_CN"]=egret.$locale_strings["zh_CN"]||{};
    var locale_strings=egret.$locale_strings["zh_CN"];
    locale_strings[3200]="RES.createGroup()传入了配置中不存在的键值: {0}";
    locale_strings[3201]="RES加载了不存在或空的资源组:\"{0}\"";
    locale_strings[3202]="请不要使用不同的类型方式来加载同一个素材！";
    locale_strings[3203]="找不到指定文件类型的解析器:{0}。 请先在项目初始化里注册指定文件类型的解析器，再启动资源加载。";
})(egret||(egret={}));
